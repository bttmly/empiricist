{
  "name": "sentence",
  "version": "1.3.0",
  "description": "assertions as sentences",
  "main": "index.js",
  "scripts": {
    "test": "mocha --compilers coffee:coffee-script/register ./test/*.coffee -R spec",
    "build": "coffee --bare --output lib --compile src"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nickb1080/sentence.git"
  },
  "keywords": [
    "assertion",
    "unit",
    "test"
  ],
  "author": {
    "name": "Nick Bottomley",
    "url": "github.com/nickb1080"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nickb1080/sentence/issues"
  },
  "homepage": "https://github.com/nickb1080/sentence",
  "devDependencies": {
    "coffee-script": "^1.9.1",
    "mocha": "^2.2.1"
  },
  "dependencies": {
    "deep-equal": "^1.0.0",
    "lodash.isempty": "^3.0.0",
    "wassat": "^2.3.0"
  },
  "readme": "# sentence [![Build Status](https://travis-ci.org/nickb1080/sentence.svg?branch=master)](https://travis-ci.org/nickb1080/sentence)\n\nBeautiful assertions for CoffeeScript. See the test file for examples.\n\nLooks like this:\n\n```coffeescript\nexpect(a) to equal b\n\nexpect(c) to exist\n\nexpect(d) to nt equal e\n\nexpect([]) to have length 0\n```\n\nThis assertion DSL is designed to take advantage of CoffeeScript's largely parenthesis-free syntax. Don't use it with plain JS unless you want assertions that look like this\n\n```js\nexpect({})(to(nt(be(an(Array)))));\n```\n\nIn many cases CoffeeScript's terse syntax is especially great for writing unit tests, since there tends to be lots of boilerplate and repeated code, and tons of `it` and `describe` blocks to close. Even for projects written in regular JS, testing with CoffeeScript is excellent. While not as full-featured as libraries like Chai, `sentence` provides a basic set of assertions that will cover most use cases. \n\nAdmittedly, I've focused on keeping the code itself as pretty as possible. A number of features are infeasible with the current approach.\n\n#### `equal`\n```coffeescript\nexpect(1) to equal 1\n```\nAssert that two values are equal.\n\n#### `eql`/`deep_equal`\n```coffeescript\nexpect(a: \"b\", c: \"d\") to eql a: \"b\", c: \"d\"\n```\nAssert that two values are deeply equal. Uses the [`deep-equal`](https://github.com/substack/node-deep-equal) package, with the **strict** option **enabled**.\n\n#### `greater`\n```coffeescript\nexpect(2) to be greater than 1\n```\nAssert that a value is greater than another value.\n\n#### `less`\n```coffeescript\nexpect(1) to be less than 2\n```\nAssert that a value is less than another value\n\n#### `contain`\n```coffeescript\nexpect(\"hello there\") to contain \"hello\"\n```\nAssert that one value contains another value (using `indexOf`). Supports strings and arrays.\n\n#### `have`\n```coffeescript\nexpect(name: \"Nick\") to have(\"name\") \"Nick\"\n```\nAssert that an object has a property equal to a value.\n\n#### `match`\n```coffeescript\nexpect(\"hello there\") to match /hello/\n```\nAssert that a string satisfies a regular expression.\n\n#### `an` `a`\n```coffeescript\nexpect([]) to be an Array\nexpect(\"\") to be a String\nexpect(true) to be an Object # fails\n```\nAssert that an object is an instance of a constructor. Doing `expect(x) to nt be an Object` tests if `x` is a primitive value (i.e. string, number, boolean, symbol)\n\n#### `exist`\n```coffeescript\nexpect(0) to exist\n```\nAssert that a value is not `null` or `undefined`\n\n\n#### `empty`\n```coffeescript\nexpect({}) to be empty\n```\n\nAssert that an object has no own enumerable keys, or if an array that it's length is zero.\n\n#### `ok`\n```coffeescript\nexpect(1) to be ok\n```\nAssert that a value is truthy\n\n#### `error`\n```coffeescript\nexpect(-> throw new Error) to error\n```\nAssert that a function throws an error when called\n\n#### `length`\n```coffeescript\nexpect([1,2,3]) to have length 3\n```\nSpecial function for \"has\" in the common case of checking an object's length\n\n\n#### `nt` ('not' is a reserved word in CoffeeScript)\n```coffeescript\n# these all pass\nexpect(false) to nt be ok\nexpect(null) to nt exist\nexpect([1]) to nt be empty\nexpect({}) to nt be an Array\nexpect([1]) to nt have length 2\nexpect([]) to nt contain 1\nexpect(->) to nt error\nexpect(\"a\") to nt match /b/\nexpect(x: \"y\") to nt have(\"x\") \"z\"\n```\n\nReverse an assertion chain\n",
  "readmeFilename": "README.md",
  "gitHead": "d30c24c8653c165004a2f27a0a998f7874b8281f",
  "_id": "sentence@1.3.0",
  "_shasum": "f13f122352a10401e5d910c939daad49786544e4",
  "_from": "sentence@*"
}
