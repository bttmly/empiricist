// Generated by CoffeeScript 1.9.2
var Candidate, Control, Experiment, MUST_BE_FN, MUST_BE_STR, ONE_CONTROL, assign, equal, ref,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice;

equal = require("assert").equal;

assign = require("object-assign");

ref = require("./"), Control = ref.Control, Candidate = ref.Candidate;

MUST_BE_FN = "";

MUST_BE_STR = "";

ONE_CONTROL = "";

Experiment = (function() {
  var id;

  id = function(v) {
    return v;
  };

  function Experiment(name, init) {
    this.run = bind(this.run, this);
    this.clean = bind(this.clean, this);
    this.context = bind(this.context, this);
    this.metadata = bind(this.metadata, this);
    this["try"] = bind(this["try"], this);
    this.use = bind(this.use, this);
    if (!(this instanceof Experiment)) {
      return new Experiment(name, init);
    }
    equal(typeof name, "string", MUST_BE_STR);
    if (init != null) {
      equal(typeof init, "function", MUST_BE_FN);
    }
    this._candidates = [];
    this._metadata = {};
    this._results = {};
    this._clean = id;
    this._name = name;
    this._runs = [];
    if (init != null) {
      if (typeof init.call === "function") {
        init.call(this);
      }
    }
  }

  Experiment.prototype.use = function(fn) {
    if (this._control) {
      throw new Error("Control function already established.");
    }
    this._control = fn;
    return this;
  };

  Experiment.prototype["try"] = function(fn) {
    this._candidates.push(fn);
    return this;
  };

  Experiment.prototype.metadata = function(obj) {
    if (obj == null) {
      return this._metadata;
    }
    assign(this._metadata, obj);
    return this;
  };

  Experiment.prototype.context = function(obj) {
    if (obj == null) {
      return this._context;
    }
    this._context = obj;
    return this;
  };

  Experiment.prototype.clean = function(fn) {
    if (!fn) {
      return this._results.map(this._clean);
    }
    this._clean = fn;
    return this;
  };

  Experiment.prototype.run = function() {
    var args, candidates, control, ret;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (!this._control) {
      throw new Error("Can't run without a control function.");
    }
    control = new Control(this, this._control, this._context, args);
    ret = control.call();
    candidates = this._candidates.map((function(_this) {
      return function(fn, i) {
        var run;
        run = new Candidate(_this, fn, _this._context, args);
        run.call();
        return run.clean(_this._clean);
      };
    })(this));
    this._runs.push({
      control: control,
      candidates: candidates
    });
    return ret;
  };

  return Experiment;

})();

module.exports = Experiment;
